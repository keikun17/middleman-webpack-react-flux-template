'use strict';Object.defineProperty(exports, '__esModule', { value: true }); // istanbul ignore next
var _createClass = (function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};})(); // istanbul ignore next
var _get = function get(_x, _x2, _x3) {var _again = true;_function: while (_again) {var object = _x, property = _x2, receiver = _x3;desc = parent = getter = undefined;_again = false;if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {var parent = Object.getPrototypeOf(object);if (parent === null) {return undefined;} else {_x = parent;_x2 = property;_x3 = receiver;_again = true;continue _function;}} else if ('value' in desc) {return desc.value;} else {var getter = desc.get;if (getter === undefined) {return undefined;}return getter.call(receiver);}}}; // istanbul ignore next
function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };} // istanbul ignore next
function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError('Cannot call a class as a function');}} // istanbul ignore next
function _inherits(subClass, superClass) {if (typeof superClass !== 'function' && superClass !== null) {throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) subClass.__proto__ = superClass;}var _actionsHeatsink_actions = require('./actions/heatsink_actions');var _actionsHeatsink_actions2 = _interopRequireDefault(_actionsHeatsink_actions);var _app_dispatcher = require('./app_dispatcher');var _app_dispatcher2 = _interopRequireDefault(_app_dispatcher);var _storesHeatsink_store = require('./stores/heatsink_store');var _storesHeatsink_store2 = _interopRequireDefault(_storesHeatsink_store);var _actionsHeat_actions = require('./actions/heat_actions');var _actionsHeat_actions2 = _interopRequireDefault(_actionsHeat_actions);var _actionsCooldown_actions = require('./actions/cooldown_actions');var _actionsCooldown_actions2 = _interopRequireDefault(_actionsCooldown_actions);var React = require('react');var 

Heatsink = (function (_React$Component) {
  function Heatsink(props) {_classCallCheck(this, Heatsink);
    _get(Object.getPrototypeOf(Heatsink.prototype), 'constructor', this).call(this, props);

    this.store_data = _storesHeatsink_store2['default'].get_new_data();
    this.state = { 
      internal_heatsinks: this.store_data.internal_heatsinks, 
      external_heatsinks: this.store_data.external_heatsinks, 
      double_heatsinks: this.store_data.heatsink_type };}_inherits(Heatsink, _React$Component);_createClass(Heatsink, [{ key: 'componentDidMount', value: 



    function componentDidMount() {
      _storesHeatsink_store2['default'].addChangeListener(this.onStoreChange.bind(this));} }, { key: 'onStoreChange', value: 


    function onStoreChange() {
      this.setState(_storesHeatsink_store2['default'].get_new_data());} }, { key: 'render', value: 


    function render() {
      return (
      React.createElement('heatsink', null, 
      React.createElement('internal_heatsink', null, 
      React.createElement('div', { className: 'input-group' }, 
      React.createElement('label', { className: true }, 'Double Heatsinks'), 
      React.createElement('div', { className: 'input-field' }, 
      React.createElement('input', { type: 'checkbox', 
        ref: 'double_heatsinks', 
        value: this.state.double_heatsinks, 
        onChange: this._onHeatsinkTypeChange.bind(this) })))), 





      React.createElement('internal_heatsink', null, 
      React.createElement('div', { className: 'input-group' }, 
      React.createElement('label', null, 'Internal Heatsinks'), 
      React.createElement('div', { className: 'input-field' }, 
      React.createElement('input', { type: 'number', 
        ref: 'internal_heatsinks', 
        value: this.state.internal_heatsinks, 
        onChange: this._onInternalChange.bind(this) })))), 





      React.createElement('external_heatsink', null, 
      React.createElement('div', { className: 'input-group' }, 
      React.createElement('label', null, 'External Heatsinks'), 
      React.createElement('div', { className: 'input-field' }, 
      React.createElement('input', { type: 'number', 
        ref: 'external_heatsinks', 
        value: this.state.external_heatsinks, 
        onChange: this._onExternalChange.bind(this) }))))));} }, { key: '_onHeatsinkTypeChange', value: 








    function _onHeatsinkTypeChange(event) {
      this.store_toggle_heatsink_type();
      _actionsHeat_actions2['default'].update_capacity();} }, { key: '_onInternalChange', value: 



    function _onInternalChange(event) {
      console.log('--- START ----');
      console.log('Step 1. I am in the heatsink component. Detected input field change');

      this.store_update_heatsink_count('internal_heatsinks', this.refs.internal_heatsinks.value);
      _actionsHeat_actions2['default'].update_capacity();} }, { key: '_onExternalChange', value: 



    function _onExternalChange(event) {
      console.log('--- START ----');
      console.log('Step 1. I am in the heatsink component. Detected input field change');

      this.store_update_heatsink_count('external_heatsinks', this.refs.external_heatsinks.value);
      _actionsHeat_actions2['default'].update_capacity();} }, { key: 'store_toggle_heatsink_type', value: 



    function store_toggle_heatsink_type() {
      _actionsHeatsink_actions2['default'].toggle_heatsink_type();
      _actionsCooldown_actions2['default'].update_store();} }, { key: 'store_update_heatsink_count', value: 


    function store_update_heatsink_count(heatsink_location, amount) {
      var new_data = {};
      new_data.heatsink_location = heatsink_location;
      new_data.amount = amount;
      _actionsHeatsink_actions2['default'].update_heatsink_count(new_data);} }]);return Heatsink;})(React.Component);




// Heatsink.propTypes = {
//   internal_heatsinks: React.PropTypes.integer
// }
exports['default'] = 
Heatsink;module.exports = exports['default'];