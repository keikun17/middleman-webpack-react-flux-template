'use strict';Object.defineProperty(exports, '__esModule', { value: true }); // istanbul ignore next
var _createClass = (function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};})(); // istanbul ignore next
var _get = function get(_x, _x2, _x3) {var _again = true;_function: while (_again) {var object = _x, property = _x2, receiver = _x3;desc = parent = getter = undefined;_again = false;if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {var parent = Object.getPrototypeOf(object);if (parent === null) {return undefined;} else {_x = parent;_x2 = property;_x3 = receiver;_again = true;continue _function;}} else if ('value' in desc) {return desc.value;} else {var getter = desc.get;if (getter === undefined) {return undefined;}return getter.call(receiver);}}}; // istanbul ignore next
function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };} // istanbul ignore next
function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError('Cannot call a class as a function');}} // istanbul ignore next
function _inherits(subClass, superClass) {if (typeof superClass !== 'function' && superClass !== null) {throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) subClass.__proto__ = superClass;}var _react = require('react');var _react2 = _interopRequireDefault(_react);var _reactDom = require('react-dom');var _reactDom2 = _interopRequireDefault(_reactDom);var _storesArmory_store = require('./stores/armory_store');var _storesArmory_store2 = _interopRequireDefault(_storesArmory_store);var _actionsWeapon_actions = require('./actions/weapon_actions');var _actionsWeapon_actions2 = _interopRequireDefault(_actionsWeapon_actions);var SmurfyScraper = (function (_React$Component) {

  function SmurfyScraper(props) {_classCallCheck(this, SmurfyScraper);
    _get(Object.getPrototypeOf(SmurfyScraper.prototype), 'constructor', this).call(this, props);
    this.scrape = this.scrape.bind(this);
    this.state = {};}_inherits(SmurfyScraper, _React$Component);_createClass(SmurfyScraper, [{ key: 'componentDidMount', value: 


    function componentDidMount() {} }, { key: 'scrape', value: 


    function scrape(e) {
      e.preventDefault();

      // In the mechlab tooltip, all the required HTML are loaded, whereas in the mechlab,
      // things gets loaded by JS
      var smurfy_url = _reactDom2['default'].findDOMNode(this.refs.smurfy_urler).value;
      smurfy_url = smurfy_url.replace('mwo.smurfy-net.de/mechlab#', 'mwo.smurfy-net.de/mechlab/loadouts');
      smurfy_url = smurfy_url.replace('i=', '/');
      smurfy_url = smurfy_url.replace('&l=', '/');

      var yql_url = 'http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20html%20where%20url=%27' + smurfy_url + '%27%20&format=json';

      var oReq = new XMLHttpRequest();

      oReq.addEventListener('progress', this.updateProgress.bind(this), false);
      oReq.addEventListener('error', this.transferFailed.bind(this), false);
      oReq.addEventListener('abort', this.transferCanceled.bind(this), false);
      oReq.addEventListener('load', this.transferComplete.bind(this), false);


      oReq.open('GET', yql_url, true);
      oReq.send();} }, { key: 'updateProgress', value: 



    function updateProgress(data) {
      this.setState({ className: 'loading' });} }, { key: 'transferFailed', value: 


    function transferFailed(data) {
      this.setState({ className: 'errored' });} }, { key: 'transferCanceled', value: 


    function transferCanceled() {
      console.log('transfer cancelled');} }, { key: 'transferComplete', value: 



    function transferComplete(data) {
      var responseText = JSON.parse(data.currentTarget.responseText);
      try {
        var result_body = JSON.parse(responseText.query.results.body);} 
      catch (err) {
        this.setState({ className: 'errored' });}


      // console.log("Result body is ")
      // console.log(result_body)

      var configurations = result_body.configuration;

      var item_ids = [];var _iteratorNormalCompletion = true;var _didIteratorError = false;var _iteratorError = undefined;try {

        for (var _iterator = configurations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {var configuration = _step.value;var _iteratorNormalCompletion4 = true;var _didIteratorError4 = false;var _iteratorError4 = undefined;try {
            for (var _iterator4 = configuration.items[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {var item = _step4.value;
              if (item.type === 'weapon') 
              item_ids.push(item.id);}} catch (err) {_didIteratorError4 = true;_iteratorError4 = err;} finally {try {if (!_iteratorNormalCompletion4 && _iterator4['return']) {_iterator4['return']();}} finally {if (_didIteratorError4) {throw _iteratorError4;}}}}} catch (err) {_didIteratorError = true;_iteratorError = err;} finally {try {if (!_iteratorNormalCompletion && _iterator['return']) {_iterator['return']();}} finally {if (_didIteratorError) {throw _iteratorError;}}}




      // console.log("item ids are ")
      // console.log(item_ids)

      var factioned_weapons_list = _storesArmory_store2['default'].get_new_data().weapons_list;
      var weapons_list = factioned_weapons_list['innersphere'].concat(factioned_weapons_list['clan']);

      var weapons_to_equip = [];var _iteratorNormalCompletion2 = true;var _didIteratorError2 = false;var _iteratorError2 = undefined;try {var _loop = function () {var 
          weapon_id = _step2.value;
          weapons_to_equip.push(weapons_list.find(function (x) {return x.weapon_id === weapon_id;}));};for (var _iterator2 = item_ids[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {_loop();}} catch (err) {_didIteratorError2 = true;_iteratorError2 = err;} finally {try {if (!_iteratorNormalCompletion2 && _iterator2['return']) {_iterator2['return']();}} finally {if (_didIteratorError2) {throw _iteratorError2;}}}


      // console.log("weapons to equip are")
      // console.log(weapons_to_equip)
      var _iteratorNormalCompletion3 = true;var _didIteratorError3 = false;var _iteratorError3 = undefined;try {
        for (var _iterator3 = weapons_to_equip[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {var weapon = _step3.value;
          if (typeof weapon === 'object') 
          _actionsWeapon_actions2['default'].equip({ props: { weapon: weapon } });}} catch (err) {_didIteratorError3 = true;_iteratorError3 = err;} finally {try {if (!_iteratorNormalCompletion3 && _iterator3['return']) {_iterator3['return']();}} finally {if (_didIteratorError3) {throw _iteratorError3;}}}


      this.setState({ className: 'loaded' });} }, { key: 'render', value: 



    function render() {
      return (
      _react2['default'].createElement('smurfy_scraper', null, 
      _react2['default'].createElement('form', { onSubmit: this.scrape }, 
      _react2['default'].createElement('div', { className: 'input-group scraper_form' }, 
      _react2['default'].createElement('label', { htmlFor: 'smurfy_url' }, 'Import from Smurfy'), 
      _react2['default'].createElement('div', null, 
      _react2['default'].createElement('input', { placeholder: 'Paste Smurfy URL', className: this.state.className, id: 'smurfy_url', ref: 'smurfy_urler' }))))));} }]);return SmurfyScraper;})(_react2['default'].Component);exports['default'] = SmurfyScraper;module.exports = exports['default'];