// import EventEmitter from 'event-emitter';
'use strict';Object.defineProperty(exports, '__esModule', { value: true }); // istanbul ignore next
var _createClass = (function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};})(); // istanbul ignore next
var _get = function get(_x, _x2, _x3) {var _again = true;_function: while (_again) {var object = _x, property = _x2, receiver = _x3;desc = parent = getter = undefined;_again = false;if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {var parent = Object.getPrototypeOf(object);if (parent === null) {return undefined;} else {_x = parent;_x2 = property;_x3 = receiver;_again = true;continue _function;}} else if ('value' in desc) {return desc.value;} else {var getter = desc.get;if (getter === undefined) {return undefined;}return getter.call(receiver);}}}; // istanbul ignore next
function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };} // istanbul ignore next
function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError('Cannot call a class as a function');}} // istanbul ignore next
function _inherits(subClass, superClass) {if (typeof superClass !== 'function' && superClass !== null) {throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) subClass.__proto__ = superClass;}var _events = require('events');var _app_dispatcher = require('../app_dispatcher');var _app_dispatcher2 = _interopRequireDefault(_app_dispatcher);var _constantsHeatsink_constants = require('../constants/heatsink_constants');var _constantsHeatsink_constants2 = _interopRequireDefault(_constantsHeatsink_constants);var data = { 
  internal_heatsinks: 10, 
  external_heatsinks: 4, 
  double_heatsinks: false };



var CHANGE = 'HEATSINK_UPDATE_COUNT';

/*
 * Update the Store's heatsink count
 */
function update(new_data) {
  data = Object.assign(data, new_data);}var 



HeatsinkStore = (function (_EventEmitter) {function HeatsinkStore() {_classCallCheck(this, HeatsinkStore);_get(Object.getPrototypeOf(HeatsinkStore.prototype), 'constructor', this).apply(this, arguments);}_inherits(HeatsinkStore, _EventEmitter);_createClass(HeatsinkStore, [{ key: 'get_new_data', 

    // move this to store base class
    value: function get_new_data() {
      return data;} }, { key: 'emitChange', 


    // move this to store base class
    value: function emitChange() {
      this.emit(CHANGE);} }, { key: 'addChangeListener', 


    // move this to store base class
    value: function addChangeListener(callback) {
      this.on(CHANGE, callback);} }, { key: 'removeChangeListener', 


    // move this to store base class
    value: function removeChangeListener(callback) {
      this.removeListener(CHANGE, callback);} }]);return HeatsinkStore;})(_events.EventEmitter);




// export the instance, not the class
var _HeatsinkStore = new HeatsinkStore();exports['default'] = 
_HeatsinkStore;

// register the actions of this store
_HeatsinkStore.dispatch_token = _app_dispatcher2['default'].register(function (payload) {

  var action_type = payload.action_type;

  switch (action_type) {
    case _constantsHeatsink_constants2['default'].HEATSINK_UPDATE_COUNT:
      update(payload.new_data);
      _HeatsinkStore.emitChange();
      break;

    case _constantsHeatsink_constants2['default'].HEATSINK_TOGGLE_TYPE:
      data.double_heatsinks = !data.double_heatsinks;
      _HeatsinkStore.emitChange();
      break;}});module.exports = exports['default'];