'use strict';Object.defineProperty(exports, '__esModule', { value: true }); // istanbul ignore next
var _createClass = (function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};})(); // istanbul ignore next
var _get = function get(_x, _x2, _x3) {var _again = true;_function: while (_again) {var object = _x, property = _x2, receiver = _x3;desc = parent = getter = undefined;_again = false;if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {var parent = Object.getPrototypeOf(object);if (parent === null) {return undefined;} else {_x = parent;_x2 = property;_x3 = receiver;_again = true;continue _function;}} else if ('value' in desc) {return desc.value;} else {var getter = desc.get;if (getter === undefined) {return undefined;}return getter.call(receiver);}}}; // istanbul ignore next
function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };} // istanbul ignore next
function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError('Cannot call a class as a function');}} // istanbul ignore next
function _inherits(subClass, superClass) {if (typeof superClass !== 'function' && superClass !== null) {throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) subClass.__proto__ = superClass;}var _events = require('events');var _app_dispatcher = require('../app_dispatcher');var _app_dispatcher2 = _interopRequireDefault(_app_dispatcher);var _constantsHeat_constants = require('../constants/heat_constants');var _constantsHeat_constants2 = _interopRequireDefault(_constantsHeat_constants);var _storesHeatsink_store = require('../stores/heatsink_store');var _storesHeatsink_store2 = _interopRequireDefault(_storesHeatsink_store);var _storesGhost_heat_group_store = require('../stores/ghost_heat_group_store');var _storesGhost_heat_group_store2 = _interopRequireDefault(_storesGhost_heat_group_store);var _actionsHeat_actions = require('../actions/heat_actions');var _actionsHeat_actions2 = _interopRequireDefault(_actionsHeat_actions);var _actionsCooldown_actions = require(
'../actions/cooldown_actions');var _actionsCooldown_actions2 = _interopRequireDefault(_actionsCooldown_actions);var _map_store = require(
'./map_store');var _map_store2 = _interopRequireDefault(_map_store);var _constantsMap_constants = require(
'../constants/map_constants');var _constantsMap_constants2 = _interopRequireDefault(_constantsMap_constants);

/**
 * Store data
 *   {float} value               - the amount of heat in the mech
 *   {float} capacity            - mech heat capacity
 */
var data = { 
  value: 0, 
  capacity: 0 };


/**
 * Increase mech heat by given amount
 *   {float} amount
 */
var add_base_heat = function add_base_heat(amount) {
  data.value = data.value + amount;};


/**
 * Reduce the heat by
 */
var release_heat = function release_heat(amount) {
  data.value = +(data.value - amount).toFixed(2);
  setTimeout(_actionsCooldown_actions2['default'].update_cooldown_time);

  if (data.value < 0) {
    data.value = 0;}};




// TODO : Move this computation logic to heat store and just return do `this.setState(HeatStore.get_new_data())
var recalculate_capacity = function recalculate_capacity() {
  var heatsink_store_data = _storesHeatsink_store2['default'].get_new_data();
  // All mechs require a minimum 10 heat sinks to function
  // Engines come with 1 HS built in for every 25 rating up to the 250 engines
  // Standard or XL engine has no impact on this
  // All rates of Dissipation are given per second
  // Single Heat Sink [SHS] are worth 0.10 Dissipation each
  // [SHS] are worth 1.00 extra Heat Capacity each
  // Double Heat Sinks [DHS] are worth 0.14 to 0.20 dissipation each
  // [DHS] are worth 1.40 to 2.00 extra heat capacity
  // Internal [DHS] are worth 0.20 dissipation and 2.00 capacity
  // Internal [HS] are the ones built into the Engine
  // Visible [DHS] are worth 0.14 dissipation and 1.40 capacity
  // Any [DHS] manually added to the engine count as Visible

  var base_capacity = 30;

  var internal_heatsink_capacity_modifier = 0;
  var external_heatsink_capacity_modifier = 0;

  if (heatsink_store_data.double_heatsinks) {
    internal_heatsink_capacity_modifier = 2;
    external_heatsink_capacity_modifier = 1.4;} else 
  {
    internal_heatsink_capacity_modifier = 1;
    external_heatsink_capacity_modifier = 1;}


  var internal_capacity = heatsink_store_data.internal_heatsinks * internal_heatsink_capacity_modifier;
  var external_capacity = heatsink_store_data.external_heatsinks * external_heatsink_capacity_modifier;

  var capacity = +(base_capacity + internal_capacity + external_capacity);

  // Map-specific modifier
  var mapstore_data = _map_store2['default'].get_new_data();
  if (typeof mapstore_data.selected_map != 'undefined') {
    capacity = capacity * mapstore_data.selected_map.capacity;}


  data.capacity = capacity;};


/* Broadcast string that notifies 'listeners' that the HeatStore's data has changed */
var CHANGE = _constantsHeat_constants2['default'].HEATSTORE_UPDATED;var 

HeatStore = (function (_EventEmitter) {function HeatStore() {_classCallCheck(this, HeatStore);_get(Object.getPrototypeOf(HeatStore.prototype), 'constructor', this).apply(this, arguments);}_inherits(HeatStore, _EventEmitter);_createClass(HeatStore, [{ key: 'get_new_data', 

    /**
     * Return contents of stored data
     * TODO: Move to a store base class
     */value: 
    function get_new_data() {
      return data;} }, { key: 'emitChange', 


    /**
     * Broadcast that the store has changed
     * TODO: Move to a store base class
     */value: 
    function emitChange() {
      this.emit(CHANGE);} }, { key: 'addChangeListener', 


    /**
     * TODO: Move to a store base class
     */value: 
    function addChangeListener(callback) {
      this.on(CHANGE, callback);} }, { key: 'removeChangeListener', 


    /**
     * TODO: Move to a store base class
     */value: 
    function removeChangeListener(callback) {
      this.removeListener(CHANGE, callback);} }]);return HeatStore;})(_events.EventEmitter);




var _HeatStore = new HeatStore();exports['default'] = 
_HeatStore;

/*
 * Register actions
 */
_HeatStore.dispatch_token = _app_dispatcher2['default'].register(function (payload) {
  var action_type = payload.action_type;
  switch (action_type) {
    case _constantsHeat_constants2['default'].HEAT_CAPACITY_UPDATE:
      recalculate_capacity();
      _HeatStore.emit(CHANGE);
      break;
    case _constantsMap_constants2['default'].CHANGE_MAP:
      _app_dispatcher2['default'].waitFor([_map_store2['default'].dispatch_token]);
      recalculate_capacity();
      _HeatStore.emit(CHANGE);
      break;
    case _constantsHeat_constants2['default'].HEAT_APPLY:
      add_base_heat(payload.weapon.heat);
      _HeatStore.emit(CHANGE);
      break;
    case _constantsHeat_constants2['default'].HEAT_RELEASE:
      release_heat(payload.amount);
      _HeatStore.emit(CHANGE);
      break;
    case _constantsHeat_constants2['default'].GHOST_HEAT_APPLY:
      add_base_heat(payload.amount);
      _HeatStore.emit(CHANGE);
      break;}});module.exports = exports['default'];