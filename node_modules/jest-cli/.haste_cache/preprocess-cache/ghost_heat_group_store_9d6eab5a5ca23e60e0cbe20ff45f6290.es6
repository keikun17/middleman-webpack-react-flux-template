'use strict';Object.defineProperty(exports, '__esModule', { value: true }); // istanbul ignore next
var _createClass = (function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};})(); // istanbul ignore next
var _get = function get(_x, _x2, _x3) {var _again = true;_function: while (_again) {var object = _x, property = _x2, receiver = _x3;desc = parent = getter = undefined;_again = false;if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {var parent = Object.getPrototypeOf(object);if (parent === null) {return undefined;} else {_x = parent;_x2 = property;_x3 = receiver;_again = true;continue _function;}} else if ('value' in desc) {return desc.value;} else {var getter = desc.get;if (getter === undefined) {return undefined;}return getter.call(receiver);}}}; // istanbul ignore next
function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };} // istanbul ignore next
function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError('Cannot call a class as a function');}} // istanbul ignore next
function _inherits(subClass, superClass) {if (typeof superClass !== 'function' && superClass !== null) {throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) subClass.__proto__ = superClass;}var _app_dispatcher = require('../app_dispatcher');var _app_dispatcher2 = _interopRequireDefault(_app_dispatcher);var _events = require('events');var _constantsHeat_constants = require('../constants/heat_constants');var _constantsHeat_constants2 = _interopRequireDefault(_constantsHeat_constants);var _constantsWeapon_constants = require('../constants/weapon_constants');var _constantsWeapon_constants2 = _interopRequireDefault(_constantsWeapon_constants);var _storesHeat_store = require('../stores/heat_store');var _storesHeat_store2 = _interopRequireDefault(_storesHeat_store);var _actionsHeat_actions = require('../actions/heat_actions');var _actionsHeat_actions2 = _interopRequireDefault(_actionsHeat_actions);var _storesWeapon_store = require(
'../stores/weapon_store');var _storesWeapon_store2 = _interopRequireDefault(_storesWeapon_store);

/**
 * Store data format
 *   <group name>: <ghost heat properties>
 *     {key}    <group name>           - Abbreviated Ghost heat linked penalty group name (e.g. slas, mlas, llas)
 *     {object} <ghost heat properies> :
 *          {float} trigger_time            - time remaining before `current` counter is reset
 *                                            heat group without triggering ghost heat
 *        {integer} current                 - number of times a weapon has been fired within the `trigger_time`
 *         {object} timer=undefined         - The 'setInterval' object for the weapon group that reduces trigger_time by a unit per tick
 *
 *
 */
var data = {};
















var CHANGE = 'GHOST_HEAT_GROUP_UPDATED';

/**
 * Register a weapon's ghost heat group
 * @param {string} id
 */
var register = function register(ghost_heat_group_id) {
  // Only register once
  if (typeof data[ghost_heat_group_id] == 'undefined') {
    data[ghost_heat_group_id] = { trigger_time: 0, current: 0, timer: undefined };}};




/**
 *
 */
var heat_scale = function heat_scale(weapons_fired) {
  if (weapons_fired < 2) {
    return 0;} else 
  if (weapons_fired >= 12) {
    return 5;}


  switch (weapons_fired) {

    case 2:
      return 0.08;
    case 3:
      return 0.18;
    case 4:
      return 0.30;
    case 5:
      return 0.45;
    case 6:
      return 0.60;
    case 7:
      return 0.60;
    case 8:
      return 0.80;
    case 9:
      return 1.50;
    case 10:
      return 2.00;
    case 11:
      return 3.00;}};



/**
 * @param {object} weapon - Equipped Weapon object from the weapon store
 *
 * 1. Set trigger time for weapon group to '2',
 * 2. Start group trigger timer if not started yet,
 * 3. Increment weapon group counter by 1
 * 4. Compute for the ghost heat if present and apply
 */
var include_ghost_heat = function include_ghost_heat(weapon) {
  var ghost_heat_group = data[weapon.ghost_heat_group];
  var ghost_heat_group = ghost_heat_group;

  // Set trigger time for the weapon group to '2'
  ghost_heat_group.trigger_time = .5;

  // Start group trigger timer if not started yet
  if (ghost_heat_group.timer == undefined) {

    ghost_heat_group.timer = setInterval(
    function () {

      if (ghost_heat_group.trigger_time > 0) {
        ghost_heat_group.trigger_time = ghost_heat_group.trigger_time - .1;} else 
      {
        // TODO : move this to its own method `reset_group_ghost_heat`
        // kill the timer when cooldown is over
        clearInterval(ghost_heat_group.timer);
        // remove the reference left behind by clearInterval
        ghost_heat_group.current = 0;
        //
        ghost_heat_group.timer = undefined;
        _GhostHeatGroupStore.emit(CHANGE);}}, 

    100);}


  // Increment weapon group counter by 1
  ghost_heat_group.current = ghost_heat_group.current + 1;

  if (ghost_heat_group.current > weapon.ghost_limit) {

    var ghost_heat_amount = weapon.heat * weapon.multiplier * heat_scale(ghost_heat_group.current);
    var ghost_linked_fire_sequence_position = ghost_heat_group.current;

    setTimeout(function () {
      _actionsHeat_actions2['default'].add_ghost_heat(ghost_heat_amount);
      var message = '[' + ghost_linked_fire_sequence_position + '] ' + weapon.name + ' caused ' + ghost_heat_amount.toFixed(2) + ' ghost heat.';
      _GhostHeatGroupStore.emit('ghost_heat_applied', message);});}};var 







GhostHeatGroupStore = (function (_EventEmitter) {function GhostHeatGroupStore() {_classCallCheck(this, GhostHeatGroupStore);_get(Object.getPrototypeOf(GhostHeatGroupStore.prototype), 'constructor', this).apply(this, arguments);}_inherits(GhostHeatGroupStore, _EventEmitter);_createClass(GhostHeatGroupStore, [{ key: 'get_new_data', 

    /**
     * Return contents of stored data
     * TODO: Move to a store base class
     */value: 
    function get_new_data() {
      return data;} }, { key: 'emitChange', 


    /**
     * Broadcast that the store has changed
     * TODO: Move to a store base class
     */value: 
    function emitChange() {
      this.emit(CHANGE);} }, { key: 'addChangeListener', 


    /**
     * TODO: Move to a store base class
     */value: 
    function addChangeListener(callback) {
      this.on(CHANGE, callback);} }, { key: 'removeChangeListener', 


    /**
     * TODO: Move to a store base class
     */value: 
    function removeChangeListener(callback) {
      this.removeListener(CHANGE, callback);} }]);return GhostHeatGroupStore;})(_events.EventEmitter);





var _GhostHeatGroupStore = new GhostHeatGroupStore();
_GhostHeatGroupStore.setMaxListeners(0);


/*
 * Register actions
 */
_GhostHeatGroupStore.dispatch_token = _app_dispatcher2['default'].register(function (payload) {

  var action_type = payload.action_type;
  switch (action_type) {

    case _constantsHeat_constants2['default'].HEAT_APPLY:
      _app_dispatcher2['default'].waitFor([_storesHeat_store2['default'].dispatch_token]);
      if (payload.weapon.ghost_limit !== 0) {
        include_ghost_heat(payload.weapon);
        _GhostHeatGroupStore.emit(CHANGE);}

      break;

    case _constantsWeapon_constants2['default'].WEAPON_EQUIP:
      _app_dispatcher2['default'].waitFor([_storesWeapon_store2['default'].dispatch_token]);
      register(payload.weapon_props.ghost_heat_group);
      break;}});exports['default'] = 




_GhostHeatGroupStore;module.exports = exports['default']; // mlas:    {trigger_time: 0, current: 0, timer: undefined, multiplier: 1 },
// llas:    {trigger_time: 0, current: 0, timer: undefined, multiplier: 2.8 },
// ppc:     {trigger_time: 0, current: 0, timer: undefined, multiplier: 7.0 },
// erppc:   {trigger_time: 0, current: 0, timer: undefined, multiplier: 4.5 },
// lrm:     {trigger_time: 0, current: 0, timer: undefined, multiplier: 2.8 },
// ac2:     {trigger_time: 0, current: 0, timer: undefined, multiplier: 1 },
// ac20:    {trigger_time: 0, current: 0, timer: undefined, multiplier: 24 },
// srm:     {trigger_time: 0, current: 0, timer: undefined, multiplier: 1 },
// ssrm:    {trigger_time: 0, current: 0, timer: undefined, multiplier: 1 },
// clas:    {trigger_time: 0, current: 0, timer: undefined, multiplier: 1 },
// cuac5:   {trigger_time: 0, current: 0, timer: undefined, multiplier: 1},
// cac5:   {trigger_time: 0, current: 0, timer: undefined, multiplier: 1},
// cac10:   {trigger_time: 0, current: 0, timer: undefined, multiplier: 1},
// cac20:   {trigger_time: 0, current: 0, timer: undefined, multiplier: 1},
// Apply ghost heat