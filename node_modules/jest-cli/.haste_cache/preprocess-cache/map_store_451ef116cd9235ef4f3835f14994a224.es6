'use strict';Object.defineProperty(exports, '__esModule', { value: true }); // istanbul ignore next
var _createClass = (function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};})(); // istanbul ignore next
var _get = function get(_x, _x2, _x3) {var _again = true;_function: while (_again) {var object = _x, property = _x2, receiver = _x3;desc = parent = getter = undefined;_again = false;if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {var parent = Object.getPrototypeOf(object);if (parent === null) {return undefined;} else {_x = parent;_x2 = property;_x3 = receiver;_again = true;continue _function;}} else if ('value' in desc) {return desc.value;} else {var getter = desc.get;if (getter === undefined) {return undefined;}return getter.call(receiver);}}}; // istanbul ignore next
function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };} // istanbul ignore next
function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError('Cannot call a class as a function');}} // istanbul ignore next
function _inherits(subClass, superClass) {if (typeof superClass !== 'function' && superClass !== null) {throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) subClass.__proto__ = superClass;}var _events = require('events');var _app_dispatcher = require('../app_dispatcher');var _app_dispatcher2 = _interopRequireDefault(_app_dispatcher);var _actionsMap_actions = require('../actions/map_actions');var _actionsMap_actions2 = _interopRequireDefault(_actionsMap_actions);var _constantsMap_constants = require('../constants/map_constants');var _constantsMap_constants2 = _interopRequireDefault(_constantsMap_constants);var _actionsHeat_actions = require('../actions/heat_actions');var _actionsHeat_actions2 = _interopRequireDefault(_actionsHeat_actions);
var data = { 
  selected_map: undefined, 
  game_maps: { 
    'Forest Colony': { dissipation: 1, capacity: 1 }, 
    'Canyon Network': { dissipation: 1, capacity: 1 }, 
    'River City': { dissipation: 1, capacity: 1 }, 
    'Crimson Strait': { dissipation: 1, capacity: 1 }, 

    'Forest Colony Snow': { dissipation: 1.25, capacity: 1.25 }, 
    'Alpine Peaks': { dissipation: 1.25, capacity: 1.25 }, 
    'Frozen City': { dissipation: 1.25, capacity: 1.25 }, 

    'Caustic Valley': { dissipation: .85, capacity: .90 }, 
    'Terra Therma': { dissipation: .75, capacity: .80 }, 
    'Tourmaline Desert': { dissipation: .85, capacity: .90 }, 

    'Caustic Valley [Crater]': { dissipation: .6, capacity: .7 }, 
    'Terra Therma [Caldera]': { dissipation: .4, capacity: .88 } } };



var CHANGE = _constantsMap_constants2['default'].MAP_CHANGED;

var change_map = function change_map(game_map) {
  data.selected_map = data.game_maps[game_map];};var 


MapStore = (function (_EventEmitter) {function MapStore() {_classCallCheck(this, MapStore);_get(Object.getPrototypeOf(MapStore.prototype), 'constructor', this).apply(this, arguments);}_inherits(MapStore, _EventEmitter);_createClass(MapStore, [{ key: 'get_new_data', 

    /**
     * Return contents of stored data
     * TODO: Move to a store base class
     */value: 
    function get_new_data() {
      return data;} }, { key: 'emitChange', 


    /**
     * Broadcast that the store has changed
     * TODO: Move to a store base class
     */value: 
    function emitChange() {
      this.emit(CHANGE);} }, { key: 'addChangeListener', 


    /**
     * TODO: Move to a store base class
     */value: 
    function addChangeListener(callback) {
      this.on(CHANGE, callback);} }, { key: 'removeChangeListener', 


    /**
     * TODO: Move to a store base class
     */value: 
    function removeChangeListener(callback) {
      this.removeListener(CHANGE, callback);} }]);return MapStore;})(_events.EventEmitter);



var _MapStore = new MapStore();

_MapStore.dispatch_token = _app_dispatcher2['default'].register(function (payload) {
  var action_type = payload.action_type;

  switch (action_type) {
    case _constantsMap_constants2['default'].CHANGE_MAP:
      change_map(payload.game_map);
      _MapStore.emit(CHANGE);
      break;}});exports['default'] = 




_MapStore;module.exports = exports['default'];